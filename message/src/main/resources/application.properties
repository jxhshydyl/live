server.port=8090

spring.application.name=message
# 区分集群
spring.application.id=101

# 这里写自己的内网ip
eureka.instance.hostname=127.0.0.1

# 这里写eureka服务器的ip
eureka.server.hostname=127.0.0.1

eureka.client.register-with-eureka=true
eureka.client.fetch-registry=true
eureka.client.service-url.defaultZone=http://${eureka.server.hostname}:2233/eureka

feign.hystrix.enabled=true
# 这样写即可.
hystrix.command.default.execution.isolation.strategy=THREAD
hystrix.command.default.execution.isolation.thread.timeoutInMilliseconds=60000
#hystrix.command."FeignService#getUser".execution.isolation.thread.timeoutInMilliseconds=60000
# 最小线程数
hystrix.threadpool.default.coreSize=1
# 最大线程数
hystrix.threadpool.default.maximumSize=2
# 线程在被释放之前将使用多长时间
hystrix.threadpool.default.keepAliveTimeMinutes=1
# 设为 true ，允许设置最小线程数 和 最大线程数
hystrix.threadpool.default.allowMaximumSizeToDivergeFromCoreSize=true
# 负载均衡策略
ribbon.NFLoadBalancerRuleClassName=com.netflix.loadbalancer.ZoneAvoidanceRule
#以下配置全局有效
ribbon.eureka.enabled=true
#建立连接超时时间，原1000，一秒。
ribbon.ConnectTimeout=6000
#请求处理的超时时间，1分钟
ribbon.ReadTimeout=60000
#所有操作都重试
ribbon.OkToRetryOnAllOperations=true
#重试发生，更换节点数最大值
ribbon.MaxAutoRetriesNextServer=10
#单个节点重试最大值
ribbon.MaxAutoRetries=1

spring.datasource.url=jdbc:mysql://jct_message:31001/jct_message?useUnicode=true&characterEncoding=utf-8&allowMultiQueries=true&useSSL=false
spring.datasource.username=cfdjt_high
spring.datasource.password=!6SzL93M65xKn01

spring.datasource.driver-class-name=com.mysql.jdbc.Driver
# 数据池类型
spring.datasource.type=com.alibaba.druid.pool.DruidDataSource
# 空闲连接器进行回收时的校验SQL
spring.datasource.druid.validation-query=SELECT 1 FROM DUAL
#? 指明连接是否被空闲连接回收器(如果有)进行检验.如果检测失败,则连接将被从池中去除.
spring.datasource.druid.test-while-idle=true
#指明是否在从池中取出连接前进行检验,如果检验失败,则从池中去除连接并尝试取出另一个.
spring.datasource.druid.test-on-borrow=true
# 指明是否在归还到池中前进行检验
spring.datasource.druid.test-on-return=false
# 空闲连接回收器线程运行期间休眠的时间值,以毫秒为单位. 如果设置为非正数,则不运行空闲连接回收器线程
spring.datasource.druid.time-between-eviction-runs-millis=600000
# 连接在池中保持空闲而不被空闲连接回收器线程(如果有)回收的最小时间值，单位毫秒. 设置7小时
spring.datasource.druid.min-evictable-idle-time-millis=25200000
# 最大活动连接: 连接池在同一时间能够分配的最大活动连接的数量,如果设置为非正数则表示不限制
spring.datasource.druid.max-active=100
spring.datasource.druid.min-idle=5
spring.datasource.druid.initial-size=5
spring.datasource.druid.max-wait=60000
spring.datasource.druid.pool-prepared-statements=true
spring.datasource.druid.max-pool-prepared-statement-per-connection-size=20
# 配置监控统计拦截的filters，去掉后监控界面sql无法统计，'wall'用于防火墙
spring.datasource.druid.filters=stat,wall
# 通过connectProperties属性来打开mergeSql功能；慢SQL记录
spring.datasource.druid.connection-properties=druid.stat.mergeSql=true;druid.stat.slowSqlMillis=5000
spring.datasource.druid.use-global-data-source-stat=true
spring.datasource.druid.filter.slf4j.enabled=true

# 实体类扫描
mybatis-plus.type-aliases-package=com.yibu.dex.misc.model
mybatis-plus.mapper-locations=classpath*:mapper/*.xml
# 打印banner
mybatis-plus.global-config.banner=false
# 驼峰转下划线
mybatis-plus.configuration.map-underscore-to-camel-case=true
#mybatis-plus.configuration.log-impl=org.apache.ibatis.logging.stdout.StdOutImpl
# spring boot jackson转换配置
# 时间格式化
spring.jackson.date-format=yyyy-MM-dd HH:mm:ss
spring.jackson.joda-date-time-format=yyyy-MM-dd HH:mm:ss
spring.jackson.serialization.write-dates-as-timestamps=false
spring.jackson.time-zone=GMT+8
# null 转 ""
spring.jackson.default-property-inclusion=non_empty
# 允许对象忽略json中不存在的属性
spring.jackson.deserialization.fail-on-unknown-properties=false
# 允许出现特殊字符和转义符
spring.jackson.parser.allow-single-quotes=true
# 允许出现单引号
spring.jackson.parser.allow-unquoted-control-chars=true

# redis的配置
# Redis数据库索引（默认为0）
spring.redis.database=0
# Redis服务器地址
spring.redis.host=127.0.0.1
# Redis服务器连接端口
spring.redis.port=6379
# Redis服务器连接密码（默认为空）
spring.redis.password=
# 连接池最大连接数（使用负值表示没有限制）
spring.redis.jedis.pool.max-active=8
# 连接池最大阻塞等待时间（使用负值表示没有限制）
spring.redis.jedis.pool.max-wait=60
# 连接池中的最大空闲连接
spring.redis.jedis.pool.max-idle=8
# 连接池中的最小空闲连接
spring.redis.jedis.pool.min-idle=0
# 连接超时时间（毫秒）
spring.redis.timeout=1000

spring.kafka.bootstrap-servers=127.0.0.1:9092
# 指定消息key和消息体的编解码方式 UTF-8
spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
spring.kafka.producer.value-serializer=org.apache.kafka.common.serialization.StringSerializer
spring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer
spring.kafka.consumer.value-deserializer=org.apache.kafka.common.serialization.StringDeserializer

spring.kafka.consumer.group-id=misc

seata.enabled=false

#文件功能
img_private_upload_path=/data/deploy/file/private
#公开图片上传服务
#img_public_upload_path=/data/deploy/ex-file/public
img_public_upload_path=D:/images
file_max_size=5242880
domain=dex.com